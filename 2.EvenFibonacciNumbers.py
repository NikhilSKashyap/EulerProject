"""
**Problem Statement**\n
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n
https://projecteuler.net/problem=2

**Authors**\n
Nikhil S Kashyap

**Language**\n
Python3
"""


class EvenFibonacciNumbers():
    """
    Finds sum of even values of Fibonacci sequence of any given number n

    **Code**\n
    **To find Fiboncacci series**\n
    >>> def fibonacci(n):
    >>>    while y < n:
    >>>        x, y = x, x + y
    >>>        fibseries.append(x)
    >>>    return fibseries

    **To sum the even elements in the series**\n
    >>> def evemsumfibseries(n):
    >>>    return sum(item for item in fibseries if item % 2 == 0 )

    """

    def __init__(self):
        self.fibseries = []
        self.x = 1
        self.y = 2

    def fibonacci(self, n):
        while self.y < n:
            self.x, self.y = self.y, self.x + self.y
            self.fibseries.append(self.x)
        return self.fibseries

    def evenfibonaccinumbers(self, n):
        '''
        **Parameters**\n
        n : Integer
            Last element

        **Variables**\n
        fibseries: List
                    List of elements of Fibonacci series
        x: Integer
            Starting element of the series
        y: Integer
            Second element of the series
        '''
        self.fibseries = self.fibonacci(n)
        return sum(item for item in self.fibseries if item % 2 == 0)


if __name__ == "__main__":
    fibonacci = EvenFibonacciNumbers()
    print(fibonacci.evenfibonaccinumbers(4000000))
